#!/usr/bin/env python
#
# Copyright (c) 2014 NSONE, Inc.
#
# License under The MIT License (MIT). See LICENSE in project root.
#

"""
usage: nsone [-h] [-v ...] [-s <server>] [-k <key>] [-c <name>=<value>]
             [--version] <command> [<args>...]

options:
   -v                     Increase verbosity level. Can be used more than once.
   -c <name=value>        Define config key "name" to be "value"
   -k, --key <key>        Use the specified API Key
   -s, --server <server>  Use the specified server endpoint [default: api.nsone.net]
   -h, --help             Get help!

Commands:
"""

import sys
from docopt import docopt
from nsone import NSONE
from nsone.config import ConfigException
from nsonecli.version import VERSION
from nsonecli.commands.base import BaseCommand
import nsonecli.commands


# gather commands
cmdList = {}
for sym, ins in nsonecli.commands.__dict__.items():
    if isinstance(ins, BaseCommand):
        cmdList[sym] = ins

# add to doc help
for cname, cmd in cmdList.items():
    __doc__ += '    %s     %s\n' % (cname, cmd.SHORT_HELP)

__doc__ += "\nSee 'nsone help <command>' for more information on a " \
           "specific command."


if __name__ == '__main__':
    args = docopt(__doc__,
                  version='nsone CLI version %s' % VERSION,
                  options_first=True)
    # print('global arguments:')
    # print(args)
    # print('command arguments:')

    try:
        nsone = NSONE()
    except ConfigException as e:
        print(e.message)
        sys.exit(1)
    except IOError as e:
        print('No config file was found. Either specify an API key on the ' \
              'command line, or create %s' % NSONE.DEFAULT_CONFIG_FILE)
        sys.exit(1)

    # XXX config nsone based on cmd args
    BaseCommand.nsone = nsone

    argv = [args['<command>']] + args['<args>']
    if args['<command>'] in cmdList.keys():
        svc = cmdList[args['<command>']]
        cArgs = docopt(svc.__doc__, argv=argv)
        svc.run(cArgs)
    elif args['<command>'] == 'help':
        print(__doc__)
    else:
        exit("%r is not a command. See 'nsone help'." % args['<command>'])

