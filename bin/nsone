#!/usr/bin/env python
#
# Copyright (c) 2014 NSONE, Inc.
#
# License under The MIT License (MIT). See LICENSE in project root.
#

"""
usage: nsone [-h] [-v ...] [-e <server>] [-k <key>] [-c <name>=<value>]
             [-f <format>] [--ignore-ssl-errors] [--version]
             [<command>] [<args>...]

Options:
   -v                      Increase verbosity level. Can be used more than once.
   -c <name=value>         Define config key "name" to be "value"
   -k, --key <key>         Use the specified API Key
   -e, --endpoint <server> Use the specified server endpoint
   -f, --format <format>   Output format: 'text' or 'json'
   --ignore-ssl-errors     Ignore SSL certificate errors
   -h, --help              Show main usage help

If no command is specified, the NSONE console is opened to accept interactive
commands.

Commands:
"""

import sys
from docopt import docopt, DocoptExit
from nsone import NSONE
from nsone.config import ConfigException
from nsonecli.version import VERSION
from nsonecli.commands.base import BaseCommand, CommandException
from nsonecli.repl import NSONERepl
import nsonecli.commands
from nsone.rest.service import ServiceException


# gather commands
cmdList = {}
for sym, ins in nsonecli.commands.__dict__.items():
    if isinstance(ins, BaseCommand):
        cmdList[sym] = ins

# special case: give the full command list to help command so it can display
# usage for all commands
cmdList['help'].setCmdList(cmdList)

# add to doc help
cmdListDoc = ''
for cname, cmd in cmdList.items():
    cmdListDoc += '   %s%s\n' % (cname.ljust(10), cmd.SHORT_HELP)

__doc__ += cmdListDoc
__doc__ += "\nSee 'nsone help <command>' for more information on a " \
           "specific command."


BANNER = 'nsone CLI version %s' % VERSION

if __name__ == '__main__':
    args = docopt(__doc__,
                  version=BANNER,
                  options_first=True)
    # print('global arguments:')
    # print(args)
    # print('command arguments:')

    try:
        nsone = NSONE()
    except ConfigException as e:
        print(e.message)
        sys.exit(1)
    except IOError as e:
        print('No config file was found. Either specify an API key on the '
              'command line, or create %s' % NSONE.DEFAULT_CONFIG_FILE)
        sys.exit(1)

    # do config overrides in nsone based on cmd args
    if args['--format']:
        nsone.config['cli']['output_format'] = args['--format']

    # do defaults
    if 'output_format' not in nsone.config.get('cli', {}):
        nsone.config['cli']['output_format'] = 'text'

    if args['--endpoint']:
        nsone.config['endpoint'] = args['--endpoint']

    if args['--ignore-ssl-errors']:
        nsone.config['ignore-ssl-errors'] = args['--ignore-ssl-errors']

    BaseCommand.nsone = nsone

    cmd = args['<command>']

    if not cmd:
        info = "\nType 'help' for help\n\nCurrent Key: %s\nEndpoint: %s" % \
               (nsone.config.getCurrentKeyID(), nsone.config.getEndpoint())
        repl = NSONERepl(cmdListDoc, cmdList)
        repl.interact(BANNER + info)
        sys.exit(0)

    cmdArgs = args['<args>']
    subArgv = [cmd] + cmdArgs
    # print "%s | %s | %s" % (cmd, cmdArgs, subArgv)
    if cmd in cmdList.keys():
        svc = cmdList[cmd]
        try:
            subArgs = docopt(svc.__doc__, argv=subArgv)
        except DocoptExit as e:
            if cmd == 'help':
                print(__doc__)
            else:
                print(e.usage)
            sys.exit(1)
        try:
            svc.run(subArgs)
        except ServiceException as e:
            print('REST API error: %s' % e.message)
        except CommandException as e:
            print(e.message)
            sys.exit(1)
    else:
        exit("%r is not a command. See 'nsone help'." % cmd)

